
(define make-ok
  (lambda (val)
    (cons "ok" val)
  )
 )
 
(define make-error
  (lambda (msg)
    (cons "error" msg)
  )
)

(define ok?
	(lambda (res)
		(if (= (pair? res) #f)
			#f
			(= (car res) "ok")
		)
	)
)

(define error?
	(lambda (res)
		(if (= (pair? res) #f)
			#f
			(= (car res) "error")
		)
	)
)

(define result?
	(lambda (res)
		(or (ok? res) (error? res))
	)
)

(define result->val
	(lambda (res)
		(cdr res)
	)
)

(define bind 
	(lambda (f)
		(lambda (res)
			(if (ok? res)
				(f (result->val res))
				res
			)
		)
	)
)

(define make-dict
  (lambda ()
    (list 'dictend )
  )
)


(define empty?
	(lambda (l)
		(if (pair? l)
			#f
			(= l '() )
		)
	)
)

(define list?
	(lambda (l)
		(if (empty? l)
			#t
			(if (pair? l)
				(list? (cdr l))
				#f
			)
		)
	)
)



(define dict?
	(lambda (d)
		(if (= (list? d) #f)
			#f
			(if (empty? d)
				#f
				(if (= (pair? (car d)) #f)
					(= (car d) 'dictend )
					(dict? (cdr d))
				)
			)
		)
	)
)

(define get
	(lambda (dict k)
		(if (= (car (car dict)) k)
			(make-ok (cdr (car dict)))
			(if (= (cdr dict) 'dictend )
				(make-error "key not found")
				(get (cdr dict) k)
			)
		)
	)
)

(define put-rec
	(lambda (dict k v)
		(if (= (pair? (cdr dict)) #f)
			(cons (cons (car dict) (cons k v)) 'dictend )
			(if (= cdr (car (car dict)) k)
				(cons (cons k v) (cdr dict))			
				(cons (car dict) (put-rec (cdr dict) k v))
			)
		)
	)	
)

(define put
  	(lambda (dict k v)
		(if (and (pair car dict) (= (car (car dict)) k))
			(make-ok (cons (cons k v) (cdr dict)))
			(make-ok (put-rec dict k v))
		)
	)
)


(define map-dict-rec
	(lambda (new-dict old-dict-iter f)
		(if (pair? car old-dict-iter)
			(
				map-dict-rec 
				(put new-dict (car (car old-dict-iter)) (f (cdr (car old-dict-iter))))
				(cdr old-dict-iter)
				f
			)
			new-dict
		)
	)
)
		

(define map-dict
	(lambda (dict f)
		(make-ok (map-dict-rec (make-dict) dict f))
	)
)


(define filter-dict-rec
	(lambda (dict new-dict old-dict-iter pred)
		(if (pair? car old-dict-iter)
			(if (pred (cdr (car old-dict-iter)))
				(
					filter-dict-rec
					(put new-dict (car (car old-dict-iter)) (cdr (car old-dict-iter)))
					(cdr old-dict-iter)
					pred
				)
				(filter-dict-rec new-dict (cdr old-dict-iter) pred)
			)
		new-dict
		)
	)
)


(define filter-dict
	(lambda (dict pred)
		(make-ok (filter-dict-rec (make-dict) dict pred))
	)
)

