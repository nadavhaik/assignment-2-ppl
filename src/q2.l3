(define make-ok
  (lambda (val)
    (cons "ok" val)
  )
 )
 
(define make-error
  (lambda (msg)
    (cons "error" msg)
  )
)

(define ok?
  (lambda (res)
    (and (pair? res)
    (= (car res) "ok")
  )
 )
)

(define error?
	(lambda (res)
		(and (pair? res)
			(= (car res) "error")
		)
	)
)

(define result?
	(lambda (res)
		(or (ok? res) (error? res))
	)
)

(define result->val
	(lambda (res)
		(cdr res)
	)
)

(define bind 
	(lambda (f)
		(lambda (res)
			(if ok?) 
			(make-ok (f (cdr res)))
			(res)
		)
	)
)


(define make-dict
  (lambda ()
    (list 'dictend)
  )
)

(define dict?
	(lambda (d)
		(if (or ((= (list? d) #f) (empty d)))
			(#f)
			(= (nth d (- (length d) 1)) 'dictend)
		)
	)
)


(define get
	(lambda (dict k)
		(if (= (car (car dict)) k)
			(make-ok (cdr (car dict)))
			(if (= (cdr dict) 'dictend)
				(make-error "key not found")
				(get (cdr dict) k)
			)
		)
	)
)

(define put_rec
	(lambda (dict k v)
		(if (= (cdr dict) 'dictend)
			(cons (cons (car dict) (cons k v)) 'dictend)
			(if (= cdr (car (car dict)) k)
				(cons (cons k v) (cdr dict))			
				(cons (car dict) (put_rec (cdr dict) k v))
			)
		)
	)	
)


(define put
  	(lambda (dict k v)
		(if (= (car (car dict)) k)
			(make-ok (cons (cons k v) (cdr dict)))
			(make-ok (put_rec dict k v))
		)
	)
)

(define map-dict
  (lambda (dict f)
    @TODO
  )
)

(define filter-dict
  (lambda (dict pred)
    @TODO
  )
)
